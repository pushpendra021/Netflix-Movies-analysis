# -*- coding: utf-8 -*-
"""netflix_movies_data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O_RN4N68_fY29v39ifWVRHH5nMB6PNJ0
"""

from google.colab import drive
drive.mount('/content/drive')

#important libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv("/content/drive/MyDrive/Data Analyst Project/mymoviedb.csv",lineterminator='\n')
data.head(3)

data.columns

data.shape

#for basic information
data.info()

data['Genre'].head()

"""data preprocessing

1. convert Release_Date into correct formate (Object data type into date time formate)

2. remove whitespace (eg. Action, Adventure----->Action,Adventure)

3. remove duplicate values
4. Check for null values column-wise(if yes the convert back forward or upforward)

5. remove unnecesarry columns like Overvies,Original_Language and Poster_Url
"""

#4 Check for null values column-wise
print(data.isnull().sum())

#3 remove duplicate data
print(data.duplicated().sum())

#show total number of rows,min value,max value ,mean,std ,25%,50% 75%
#describe function apply only numerical values
data.describe()

#1 convert Release_Date formate(Object data type into date time formate)
#only required year
data['Release_Date']=pd.to_datetime(data['Release_Date'])
print(data['Release_Date'].dtypes)
data['Release_Date'].head(2)

#only required year
# Ensure column is datetime type
data['Release_Date'] = pd.to_datetime(data['Release_Date'], errors='coerce')

# Now extract the year
data['Release_Date'] = data['Release_Date'].dt.year

# Check the type
print(data['Release_Date'].dtypes)

# Preview data
print(data['Release_Date'].head(2))

data.head()

#5 remove unnecesarry columns like Overvies,Original_Language and Poster_Url
cols=['Overview','Original_Language','Poster_Url']

data.drop(cols,axis=1,inplace=True)
data.columns
data.head()



"""**categorizing Vote_Average column**

We would cut the Vote_Average values and make 4 categories: popular, average, below_avg, not_popular to describe it more using catigorize_col() function provided above.
"""

#cut meyhodes helps in categorization
def catigorize_col(data,col,lables):
  edges=[data[col].describe()['min'],
         data[col].describe()['25%'],
         data[col].describe()['50%'],
         data[col].describe()['75%'],
         data[col].describe()['max']]
  data[col]=pd.cut(data[col],edges,labels=labels,duplicates='drop')
  return data

labels=['not_populer','below_populer','average','populer']
catigorize_col(data,'Vote_Average',labels)
data['Vote_Average']

data['Vote_Average'].unique()

data['Vote_Average'].value_counts()

#3 remove duplicate value in particular row
data.dropna(inplace=True)
data.isna().sum()

data.head()

#2 remove whitespace (eg. Action, Adventure----->Action,Adventure)
data['Genre'] = data['Genre'].str.split(', ')
data = data.explode('Genre').reset_index(drop=True)

data.head()

#casting column into category

data['Genre'] = data['Genre'].astype('category')

data['Genre'].dtypes

data.info()

#nunique() counts the number of unique values in a column (or entire DataFrame if applied directly to it).
data.nunique()

data.head()

"""Data Visualization"""

sns.set_style('whitegrid')

#What is the most frequent genre of movies released on Netflix?
data['Genre'].describe()

sns.catplot(y='Genre',data=data,kind='count',order=data['Genre'].value_counts().index,color='#4287f5')
plt.title('Genre column distribution')
plt.show()

#What genres have the highest votes?
sns.catplot(y='Vote_Average',data=data,kind='count',order=data['Vote_Average'].value_counts().index,color='#4287f5')
plt.title('Voter distribution')
plt.show()

#What movie got the highest popularity? What’s its genre?
data.head()

data[data['Popularity']==data['Popularity'].max()]

#What movie got the lowest popularity? What’s its genre?
data[data['Popularity']==data['Popularity'].min()]

#Which year has the most filmed movies?
data['Release_Date'].hist()
plt.title('Release Date columns distribution')
plt.show()
